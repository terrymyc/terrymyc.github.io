-- split-bib.lua (adjusted for apa-cv.csl)

local utils = require "pandoc.utils"
local List  = require "pandoc.List"

local original_meta = {}

function Meta(meta)
  original_meta = meta
  return meta
end

function Div(div)
  local isArt  = div.classes:includes("refs-articles")
  local isConf = div.classes:includes("refs-conferences")
  if not (isArt or isConf) then
    return nil
  end

  -- ↳ exactly the CSL types you have in apa-cv.csl
  local types = {
    articles = {
      "article", "article-journal",
      "article-magazine", "article-newspaper"
    },
    conferences = {
      "paper-conference"
    }
  }
  local want = isArt and "articles" or "conferences"

  -- pick only entries whose .type matches one of those
  local pool = original_meta.references or {}
  local sel  = List{}
  for _, entry in ipairs(pool) do
    for _, t in ipairs(types[want]) do
      if entry.type == t then
        sel:insert(entry)
        break
      end
    end
  end

  -- warn if nothing matched (helps debugging)
  if #sel == 0 then
    io.stderr:write("⚠️ [split‑bib.lua] no “"
      .. want .. "” entries found\n")
  end

  -- build a stub doc with only that subset
  local meta = pandoc.Meta(original_meta)
  meta.references              = pandoc.MetaList(sel)
  meta["suppress-bibliography"] = false
  meta.nocite                  = pandoc.MetaList{
                                    pandoc.MetaInlines{pandoc.Str("@*")}
                                 }

  local stub = pandoc.Pandoc({}, meta)
  -- run Pandoc’s internal citeproc engine
  local out  = utils.citeproc(stub)
  return out.blocks
end
